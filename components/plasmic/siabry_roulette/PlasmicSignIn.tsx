// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dg9YtSNXc6dazeT5TWG9ym
// Component: 8Is3JhhhO8
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_siabry_roulette.module.css"; // plasmic-import: dg9YtSNXc6dazeT5TWG9ym/projectcss
import sty from "./PlasmicSignIn.module.css"; // plasmic-import: 8Is3JhhhO8/css

import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: 5Xl52El9D/icon
import G4682Icon from "./icons/PlasmicIcon__G4682"; // plasmic-import: eYsRcLe4eP/icon

export type PlasmicSignIn__VariantMembers = {};

export type PlasmicSignIn__VariantsArgs = {};
type VariantPropType = keyof PlasmicSignIn__VariantsArgs;
export const PlasmicSignIn__VariantProps = new Array<VariantPropType>();

export type PlasmicSignIn__ArgsType = {};
type ArgPropType = keyof PlasmicSignIn__ArgsType;
export const PlasmicSignIn__ArgProps = new Array<ArgPropType>();

export type PlasmicSignIn__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  header?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  group?: p.Flex<"div">;
  button?: p.Flex<"div">;
  googleBtn?: p.Flex<"div">;
  rectangle2?: p.Flex<"div">;
  rectangle1?: p.Flex<"div">;
  frame2?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
  facebookBtn?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  rectangle3?: p.Flex<"div">;
  rectangle4?: p.Flex<"div">;
};

export interface DefaultSignInProps {}

function PlasmicSignIn__RenderFunc(props: {
  variants: PlasmicSignIn__VariantsArgs;
  args: PlasmicSignIn__ArgsType;
  overrides: PlasmicSignIn__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.header)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"logo"}
                    data-plasmic-override={overrides.logo}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.logo)}
                  >
                    <div
                      data-plasmic-name={"group"}
                      data-plasmic-override={overrides.group}
                      className={classNames(projectcss.all, sty.group)}
                    >
                      <GroupIcon
                        className={classNames(projectcss.all, sty.svg__wovxA)}
                        role={"img"}
                      />
                    </div>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__b7Quk
                      )}
                    >
                      {"Сябра рулетка"}
                    </div>
                  </p.Stack>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fv9Ys
                    )}
                  >
                    {
                      "Вітаем, любасныя і дарагія сябры!\nМы запускаем новы міні праект, для таго каб зрабіць нас яшчэ бліжэй, для таго каб выключыць рознага роду вычварэнцаў, мы патрабуем уваходу!"
                    }
                  </div>
                </p.Stack>
              ) : null}

              <p.Stack
                as={"div"}
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                hasGap={true}
                className={classNames(projectcss.all, sty.button)}
              >
                <div
                  data-plasmic-name={"googleBtn"}
                  data-plasmic-override={overrides.googleBtn}
                  className={classNames(projectcss.all, sty.googleBtn)}
                >
                  <div
                    data-plasmic-name={"rectangle2"}
                    data-plasmic-override={overrides.rectangle2}
                    className={classNames(projectcss.all, sty.rectangle2)}
                  />

                  <div
                    data-plasmic-name={"rectangle1"}
                    data-plasmic-override={overrides.rectangle1}
                    className={classNames(projectcss.all, sty.rectangle1)}
                  />

                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"frame2"}
                    data-plasmic-override={overrides.frame2}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.frame2)}
                  >
                    <p.PlasmicImg
                      data-plasmic-name={"img"}
                      data-plasmic-override={overrides.img}
                      alt={""}
                      className={classNames(sty.img)}
                      displayHeight={"24px" as const}
                      displayMaxHeight={"none" as const}
                      displayMaxWidth={"100%" as const}
                      displayMinHeight={"0" as const}
                      displayMinWidth={"0" as const}
                      displayWidth={"23.489px" as const}
                      loading={"lazy" as const}
                      src={{
                        src: "/plasmic/siabry_roulette/images/group2.svg",
                        fullWidth: 23.489,
                        fullHeight: 24,
                        aspectRatio: 1000000
                      }}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__opcY7
                      )}
                    >
                      {"увайсці"}
                    </div>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"facebookBtn"}
                  data-plasmic-override={overrides.facebookBtn}
                  className={classNames(projectcss.all, sty.facebookBtn)}
                >
                  <div
                    data-plasmic-name={"group2"}
                    data-plasmic-override={overrides.group2}
                    className={classNames(projectcss.all, sty.group2)}
                  >
                    <div
                      data-plasmic-name={"rectangle3"}
                      data-plasmic-override={overrides.rectangle3}
                      className={classNames(projectcss.all, sty.rectangle3)}
                    />

                    <div
                      data-plasmic-name={"rectangle4"}
                      data-plasmic-override={overrides.rectangle4}
                      className={classNames(projectcss.all, sty.rectangle4)}
                    />

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4XNq
                      )}
                    >
                      {"увайсці"}
                    </div>
                  </div>

                  <G4682Icon
                    className={classNames(projectcss.all, sty.svg__xYNq)}
                    role={"img"}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qksx
                    )}
                  >
                    {"за"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__dsbnN
                    )}
                  >
                    {"эйсбучыцца"}
                  </div>
                </div>
              </p.Stack>
            </p.Stack>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "header",
    "logo",
    "group",
    "button",
    "googleBtn",
    "rectangle2",
    "rectangle1",
    "frame2",
    "img",
    "facebookBtn",
    "group2",
    "rectangle3",
    "rectangle4"
  ],
  freeBox: [
    "freeBox",
    "header",
    "logo",
    "group",
    "button",
    "googleBtn",
    "rectangle2",
    "rectangle1",
    "frame2",
    "img",
    "facebookBtn",
    "group2",
    "rectangle3",
    "rectangle4"
  ],
  header: ["header", "logo", "group"],
  logo: ["logo", "group"],
  group: ["group"],
  button: [
    "button",
    "googleBtn",
    "rectangle2",
    "rectangle1",
    "frame2",
    "img",
    "facebookBtn",
    "group2",
    "rectangle3",
    "rectangle4"
  ],
  googleBtn: ["googleBtn", "rectangle2", "rectangle1", "frame2", "img"],
  rectangle2: ["rectangle2"],
  rectangle1: ["rectangle1"],
  frame2: ["frame2", "img"],
  img: ["img"],
  facebookBtn: ["facebookBtn", "group2", "rectangle3", "rectangle4"],
  group2: ["group2", "rectangle3", "rectangle4"],
  rectangle3: ["rectangle3"],
  rectangle4: ["rectangle4"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  header: "div";
  logo: "div";
  group: "div";
  button: "div";
  googleBtn: "div";
  rectangle2: "div";
  rectangle1: "div";
  frame2: "div";
  img: typeof p.PlasmicImg;
  facebookBtn: "div";
  group2: "div";
  rectangle3: "div";
  rectangle4: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicSignIn__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicSignIn__VariantsArgs;
    args?: PlasmicSignIn__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicSignIn__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicSignIn__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSignIn__ArgProps,
      internalVariantPropNames: PlasmicSignIn__VariantProps
    });

    return PlasmicSignIn__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSignIn";
  } else {
    func.displayName = `PlasmicSignIn.${nodeName}`;
  }
  return func;
}

export const PlasmicSignIn = Object.assign(
  // Top-level PlasmicSignIn renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    header: makeNodeComponent("header"),
    logo: makeNodeComponent("logo"),
    group: makeNodeComponent("group"),
    button: makeNodeComponent("button"),
    googleBtn: makeNodeComponent("googleBtn"),
    rectangle2: makeNodeComponent("rectangle2"),
    rectangle1: makeNodeComponent("rectangle1"),
    frame2: makeNodeComponent("frame2"),
    img: makeNodeComponent("img"),
    facebookBtn: makeNodeComponent("facebookBtn"),
    group2: makeNodeComponent("group2"),
    rectangle3: makeNodeComponent("rectangle3"),
    rectangle4: makeNodeComponent("rectangle4"),

    // Metadata about props expected for PlasmicSignIn
    internalVariantProps: PlasmicSignIn__VariantProps,
    internalArgProps: PlasmicSignIn__ArgProps
  }
);

export default PlasmicSignIn;
/* prettier-ignore-end */
