// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dg9YtSNXc6dazeT5TWG9ym
// Component: hjoGpmwmLZd2_
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { Button } from "antd"; // plasmic-import: kv6Mk_JNYw/codeComponent
import { Slider } from "@plasmicpkgs/antd"; // plasmic-import: iBC45mjTXv/codeComponent
import Checkbox from "antd/lib/checkbox/Checkbox"; // plasmic-import: SAEWraOT2YV/codeComponent
import Collapse from "antd/lib/collapse/Collapse"; // plasmic-import: F10gpQ1ZhXY/codeComponent
import CollapsePanel from "antd/lib/collapse/CollapsePanel"; // plasmic-import: yegZ392NLoV/codeComponent
import { Dropdown } from "@plasmicpkgs/antd"; // plasmic-import: cv59X4q0WK/codeComponent
import Menu from "antd/lib/menu/index"; // plasmic-import: Iz_hLKpHZDg/codeComponent
import MenuItem from "antd/lib/menu/MenuItem"; // plasmic-import: HZ6EmQgIQJr/codeComponent
import SubMenu from "antd/lib/menu/SubMenu"; // plasmic-import: DSwQm8gUYob/codeComponent
import { Input } from "antd"; // plasmic-import: tO9wrxr8Nbb/codeComponent
import Search from "antd/lib/input/Search"; // plasmic-import: zDcn8vsMldu/codeComponent
import Password from "antd/lib/input/Password"; // plasmic-import: fTDg0FM1tnD/codeComponent
import TextArea from "antd/lib/input/TextArea"; // plasmic-import: ZJIPHLoTjkN/codeComponent
import { Select } from "antd"; // plasmic-import: 2YpGIhkzkpc/codeComponent
import { Option } from "rc-select"; // plasmic-import: YRr0RPAdEj/codeComponent
import { Switch } from "antd"; // plasmic-import: tRueht1jub/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_siabry_roulette.module.css"; // plasmic-import: dg9YtSNXc6dazeT5TWG9ym/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: hjoGpmwmLZd2_/css

import HeartSvgrepoComsvgIcon from "./icons/PlasmicIcon__HeartSvgrepoComsvg"; // plasmic-import: acbDaG0GYIn_5/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  svg?: p.Flex<"svg">;
  antdCollapse?: p.Flex<typeof Collapse>;
  antdDropdown?: p.Flex<typeof Dropdown>;
  antdInputSearch?: p.Flex<typeof Search>;
  antdInputPassword?: p.Flex<typeof Password>;
  antdInputTextArea?: p.Flex<typeof TextArea>;
};

export interface DefaultHomepageProps {}

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <p.Stack
          as={"div"}
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          hasGap={true}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root
          )}
        >
          <h1
            data-plasmic-name={"h1"}
            data-plasmic-override={overrides.h1}
            className={classNames(
              projectcss.all,
              projectcss.h1,
              projectcss.__wab_text,
              sty.h1
            )}
          >
            {"Ant Design Sandbox"}
          </h1>

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__vpg2E
            )}
          >
            {"Button"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___8ItwO)}
            >
              <Button
                className={classNames("__wab_instance", sty.antdButton__rvGv)}
              >
                {"Default"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__j7Nq)}
                type={"primary" as const}
              >
                {"Primary"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton___1Zkag)}
                ghost={true}
                type={"primary" as const}
              >
                {"Primary Ghost"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton___1FbRy)}
                danger={true}
              >
                {"Danger"}
              </Button>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___4Uumd)}
            >
              <Button
                className={classNames("__wab_instance", sty.antdButton__rDLnQ)}
                disabled={true}
              >
                {"Disabled"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__x3Ap5)}
                loading={true}
                type={"primary" as const}
              >
                {"Loading"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__ev4Y0)}
                shape={"circle" as const}
                type={"primary" as const}
              >
                <HeartSvgrepoComsvgIcon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__cXq1S)}
                shape={"round" as const}
              >
                {"Round"}
              </Button>
            </p.Stack>
          ) : null}
          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___52ATu)}
            >
              <Button
                className={classNames("__wab_instance", sty.antdButton__kvfXp)}
                type={"dashed" as const}
              >
                {"Dashed"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton___0WUkK)}
                type={"link" as const}
              >
                {"Link"}
              </Button>

              <Button
                className={classNames("__wab_instance", sty.antdButton__tTYkQ)}
                type={"text" as const}
              >
                {"Plain text"}
              </Button>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__hb2I3
            )}
          >
            {"Slider"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__pxrEa)}
            >
              <Slider
                className={classNames("__wab_instance", sty.antdSlider__w6M6R)}
                defaultValue={20 as const}
              />

              <Slider
                className={classNames("__wab_instance", sty.antdSlider__z9En)}
                defaultValue={10 as const}
                defaultValue2={20 as const}
                max={40 as const}
                min={0 as const}
                range={true}
              />

              <Slider
                className={classNames("__wab_instance", sty.antdSlider__wv9WS)}
                defaultValue={50 as const}
                defaultValue2={20 as const}
                range={false}
                vertical={true}
              />
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__jk3BS
            )}
          >
            {"Checkbox"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__g3Oo)}
            >
              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__jDtdl
                )}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__sY9ML
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__zI34A
                )}
                defaultChecked={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__znwZ7
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__za86X
                )}
                defaultChecked={true}
                disabled={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___7XH5H
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>

              <Checkbox
                className={classNames(
                  "__wab_instance",
                  sty.antdCheckbox__hcQHi
                )}
                indeterminate={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Th9
                  )}
                >
                  {"Checkbox"}
                </div>
              </Checkbox>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__bgHbq
            )}
          >
            {"Collapsible"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__oNrgz)}
            >
              <Collapse
                data-plasmic-name={"antdCollapse"}
                data-plasmic-override={overrides.antdCollapse}
                className={classNames("__wab_instance", sty.antdCollapse)}
                defaultActiveKey={"2" as const}
              >
                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__mYqNq
                  )}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5JKvi
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"1" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__s6WEp
                    )}
                  >
                    {"Insert text here"}
                  </div>
                </CollapsePanel>

                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__qykWy
                  )}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4ZDTa
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"2" as const}
                >
                  {"This is the body of the Collapse."}
                </CollapsePanel>

                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__di3Iy
                  )}
                  collapsible={"disabled" as const}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__kzBuB
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"3" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__r1Lxk
                    )}
                  >
                    {"Insert text here"}
                  </div>
                </CollapsePanel>

                <CollapsePanel
                  className={classNames(
                    "__wab_instance",
                    sty.antdCollapsePanel__l6K7K
                  )}
                  header={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__y08F
                      )}
                    >
                      {"Header"}
                    </div>
                  }
                  key={"4" as const}
                  showArrow={false}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__iYZod
                    )}
                  >
                    {"Insert text here"}
                  </div>
                </CollapsePanel>
              </Collapse>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__i6Sby
            )}
          >
            {"Dropdown"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox___5H3GU)}
            >
              <Dropdown
                data-plasmic-name={"antdDropdown"}
                data-plasmic-override={overrides.antdDropdown}
                arrow={true}
                className={classNames("__wab_instance", sty.antdDropdown)}
                overlay={
                  <Menu
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenu__jWtEr
                    )}
                    defaultOpenKeys={["subMenuKey"]}
                    defaultSelectedKeys={["subMenuItemKey"]}
                    mode={"inline" as const}
                  >
                    <MenuItem
                      className={classNames(
                        "__wab_instance",
                        sty.antdMenuItem___71ZgX
                      )}
                      key={"menuItemKey" as const}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8QJj
                        )}
                      >
                        {"Option"}
                      </div>
                    </MenuItem>

                    <SubMenu
                      className={classNames(
                        "__wab_instance",
                        sty.antdSubMenu___5BfhJ
                      )}
                      key={"subMenuKey" as const}
                      title={
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__yb20Q
                          )}
                        >
                          {"Sub-menu"}
                        </div>
                      }
                    >
                      <MenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.antdMenuItem__gaVzu
                        )}
                        key={"subMenuItemKey" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fPi7V
                          )}
                        >
                          {"A nested submenu item"}
                        </div>
                      </MenuItem>

                      <MenuItem
                        className={classNames(
                          "__wab_instance",
                          sty.antdMenuItem__iC5F
                        )}
                        key={"subMenuItemKey2" as const}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__dAhtv
                          )}
                        >
                          {"A nested submenu item"}
                        </div>
                      </MenuItem>
                    </SubMenu>
                  </Menu>
                }
              >
                {"Hover me"}
              </Dropdown>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__m1E9L
            )}
          >
            {"Input"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__vFfM)}
            >
              <Input
                className={classNames("__wab_instance", sty.antdInput__tAql3)}
                placeholder={"Placeholder" as const}
              />

              <Input
                bordered={false}
                className={classNames("__wab_instance", sty.antdInput__jOEjS)}
                placeholder={"Placeholder" as const}
              />

              <Input
                className={classNames("__wab_instance", sty.antdInput__uWl7C)}
                disabled={true}
                placeholder={"Placeholder" as const}
              />

              <Input
                className={classNames("__wab_instance", sty.antdInput__rhA4S)}
                defaultValue={"Initial text" as const}
                placeholder={"Placeholder" as const}
              />

              <Search
                data-plasmic-name={"antdInputSearch"}
                data-plasmic-override={overrides.antdInputSearch}
                className={classNames("__wab_instance", sty.antdInputSearch)}
                placeholder={"Search" as const}
              />

              <Password
                data-plasmic-name={"antdInputPassword"}
                data-plasmic-override={overrides.antdInputPassword}
                className={classNames("__wab_instance", sty.antdInputPassword)}
                defaultValue={"password" as const}
              />

              <TextArea
                data-plasmic-name={"antdInputTextArea"}
                data-plasmic-override={overrides.antdInputTextArea}
                className={classNames("__wab_instance", sty.antdInputTextArea)}
                placeholder={"Text area" as const}
              />
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__ll5K8
            )}
          >
            {"Menu"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__lS4Nw)}
            >
              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__t1N4Z
                )}
              >
                {"Vertical"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__lHsgn)}
                defaultOpenKeys={["subMenuKey"]}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__ot0Ln
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___9CWnP
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu__bGIy2
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___6DEiR
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__wM2Gp
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0DcM
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__phWvf
                    )}
                    key={"subMenuItemKey2" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xPzQy
                      )}
                    >
                      {"Sub-menu item 2"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__tDaj9
                )}
              >
                {"Horizontal"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__cHNjc)}
                defaultOpenKeys={["subMenuKey"]}
                mode={"horizontal" as const}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__k9Fo0
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fhFgQ
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu__nSxJv
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__oUvFi
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__qdNx8
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__u2Gtu
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__jYsR9
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__waMbt
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__kkfgw
                )}
              >
                {"Inline"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu___3HkC)}
                defaultOpenKeys={["subMenuKey"]}
                mode={"inline" as const}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__s93I9
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___01Voi
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu__tJ7Tw
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qectm
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__nAUp7
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2YdYd
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem___8JeEo
                    )}
                    key={"subMenuItemKey2" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__m9Buf
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__e1KZz
                )}
              >
                {"Dark mode"}
              </h3>

              <Menu
                className={classNames("__wab_instance", sty.antdMenu__yJzRn)}
                defaultOpenKeys={["subMenuKey"]}
                mode={"inline" as const}
                theme={"dark" as const}
              >
                <MenuItem
                  className={classNames(
                    "__wab_instance",
                    sty.antdMenuItem__snCvl
                  )}
                  key={"menuItemKey" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__extF
                    )}
                  >
                    {"Option"}
                  </div>
                </MenuItem>

                <SubMenu
                  className={classNames(
                    "__wab_instance",
                    sty.antdSubMenu__tJ7Tw
                  )}
                  key={"subMenuKey" as const}
                  title={
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qcG1Y
                      )}
                    >
                      {"Sub-menu"}
                    </div>
                  }
                >
                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__h0God
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___5VPsJ
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>

                  <MenuItem
                    className={classNames(
                      "__wab_instance",
                      sty.antdMenuItem__dTEP
                    )}
                    key={"subMenuItemKey" as const}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__e7Hp1
                      )}
                    >
                      {"Sub-menu item"}
                    </div>
                  </MenuItem>
                </SubMenu>
              </Menu>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__jpb3S
            )}
          >
            {"Select"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__i09Y)}
            >
              <Select
                className={classNames("__wab_instance", sty.antdSelect__lckRk)}
                defaultOpen={true}
                placeholder={
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__bubx4
                    )}
                  >
                    {"Select"}
                  </div>
                }
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__uyzYc
                  )}
                  value={"Option" as const}
                >
                  {"Option"}
                </Option>

                <Option
                  className={classNames("__wab_instance", sty.antdOption__jpqu)}
                  value={"Option 2" as const}
                >
                  {"Option 2"}
                </Option>
              </Select>

              <Select
                bordered={false}
                className={classNames("__wab_instance", sty.antdSelect__oOd9C)}
                placeholder={"Unbordered"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption___9JZnD
                  )}
                  value={"Option" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tyNam
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>

              <Select
                className={classNames("__wab_instance", sty.antdSelect__cdhap)}
                disabled={true}
                placeholder={"Disabled"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption__aOhHf
                  )}
                  value={"Option" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kPjhc
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>

              <Select
                className={classNames("__wab_instance", sty.antdSelect__fj72)}
                loading={true}
                placeholder={"Loading"}
              >
                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption___3VyU
                  )}
                  value={"Option" as const}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__tjgs1
                    )}
                  >
                    {"Option"}
                  </div>
                </Option>
              </Select>

              <Select
                className={classNames("__wab_instance", sty.antdSelect__oxJd)}
                defaultValue={"Option" as const}
                mode={"multiple" as const}
                placeholder={"Loading"}
              >
                <Option
                  className={classNames("__wab_instance", sty.antdOption__uKkZ)}
                  value={"Option" as const}
                >
                  {"Option"}
                </Option>

                <Option
                  className={classNames(
                    "__wab_instance",
                    sty.antdOption___4AAqe
                  )}
                  value={"Option 2" as const}
                >
                  {"Option"}
                </Option>
              </Select>
            </p.Stack>
          ) : null}

          <h2
            className={classNames(
              projectcss.all,
              projectcss.h2,
              projectcss.__wab_text,
              sty.h2__oRb6B
            )}
          >
            {"Switch"}
          </h2>

          {true ? (
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__gYA)}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__cTfv3)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__inEz1
                    )}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__szMug
                    )}
                  >
                    {"Normal"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__ezuc6)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__tpFu
                    )}
                    defaultChecked={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yRcEy
                    )}
                  >
                    {"Checked"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__qoB8L)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__fto7Z
                    )}
                    disabled={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sFJez
                    )}
                  >
                    {"Disabled"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__mXsPv)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__yQnYw
                    )}
                    loading={true}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__qKQm
                    )}
                  >
                    {"Loading"}
                  </div>
                </p.Stack>
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__w2MRx)}
                >
                  <Switch
                    className={classNames(
                      "__wab_instance",
                      sty.antdSwitch__iMpQd
                    )}
                    size={"small" as const}
                  />

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___4Fjcd
                    )}
                  >
                    {"Small"}
                  </div>
                </p.Stack>
              ) : null}
            </p.Stack>
          ) : null}
        </p.Stack>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "h1",
    "svg",
    "antdCollapse",
    "antdDropdown",
    "antdInputSearch",
    "antdInputPassword",
    "antdInputTextArea"
  ],
  h1: ["h1"],
  svg: ["svg"],
  antdCollapse: ["antdCollapse"],
  antdDropdown: ["antdDropdown"],
  antdInputSearch: ["antdInputSearch"],
  antdInputPassword: ["antdInputPassword"],
  antdInputTextArea: ["antdInputTextArea"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  h1: "h1";
  svg: "svg";
  antdCollapse: typeof Collapse;
  antdDropdown: typeof Dropdown;
  antdInputSearch: typeof Search;
  antdInputPassword: typeof Password;
  antdInputTextArea: typeof TextArea;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    h1: makeNodeComponent("h1"),
    svg: makeNodeComponent("svg"),
    antdCollapse: makeNodeComponent("antdCollapse"),
    antdDropdown: makeNodeComponent("antdDropdown"),
    antdInputSearch: makeNodeComponent("antdInputSearch"),
    antdInputPassword: makeNodeComponent("antdInputPassword"),
    antdInputTextArea: makeNodeComponent("antdInputTextArea"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
