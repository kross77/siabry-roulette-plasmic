// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: dg9YtSNXc6dazeT5TWG9ym
// Component: hBQdWS-R4a9
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Button from "../../Button"; // plasmic-import: u1DvWpKgNeq/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_siabry_roulette.module.css"; // plasmic-import: dg9YtSNXc6dazeT5TWG9ym/projectcss
import sty from "./PlasmicRoulette.module.css"; // plasmic-import: hBQdWS-R4a9/css

import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: 5Xl52El9D/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: Q-5LfjBcmfs/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: vDlkk4NcY5X/icon

export type PlasmicRoulette__VariantMembers = {
  loading: "loading";
  logout: "logout";
};

export type PlasmicRoulette__VariantsArgs = {
  loading?: SingleBooleanChoiceArg<"loading">;
  logout?: SingleBooleanChoiceArg<"logout">;
};

type VariantPropType = keyof PlasmicRoulette__VariantsArgs;
export const PlasmicRoulette__VariantProps = new Array<VariantPropType>(
  "loading",
  "logout"
);

export type PlasmicRoulette__ArgsType = {};
type ArgPropType = keyof PlasmicRoulette__ArgsType;
export const PlasmicRoulette__ArgProps = new Array<ArgPropType>();

export type PlasmicRoulette__OverridesType = {
  root?: p.Flex<"div">;
  freeBox?: p.Flex<"div">;
  header?: p.Flex<"div">;
  logo?: p.Flex<"div">;
  group?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  text?: p.Flex<"div">;
  logoutBtn?: p.Flex<typeof Button>;
  video?: p.Flex<"div">;
  loading?: p.Flex<"div">;
  img?: p.Flex<typeof p.PlasmicImg>;
};

export interface DefaultRouletteProps {}

function PlasmicRoulette__RenderFunc(props: {
  variants: PlasmicRoulette__VariantsArgs;
  args: PlasmicRoulette__ArgsType;
  overrides: PlasmicRoulette__OverridesType;

  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;
  const $props = props.args;

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            sty.root,
            {
              [sty.rootloading]: hasVariant(variants, "loading", "loading"),
              [sty.rootlogout]: hasVariant(variants, "logout", "logout")
            }
          )}
        >
          {true ? (
            <p.Stack
              as={"div"}
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox, {
                [sty.freeBoxlogout]: hasVariant(variants, "logout", "logout")
              })}
            >
              {true ? (
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"header"}
                  data-plasmic-override={overrides.header}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.header)}
                >
                  <p.Stack
                    as={"div"}
                    data-plasmic-name={"logo"}
                    data-plasmic-override={overrides.logo}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.logo)}
                  >
                    <div
                      data-plasmic-name={"group"}
                      data-plasmic-override={overrides.group}
                      className={classNames(projectcss.all, sty.group)}
                    >
                      <GroupIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg)}
                        role={"img"}
                      />
                    </div>

                    <div
                      data-plasmic-name={"text"}
                      data-plasmic-override={overrides.text}
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text
                      )}
                    >
                      {"Сябра рулетка"}
                    </div>
                  </p.Stack>
                </p.Stack>
              ) : null}
              {(hasVariant(variants, "logout", "logout") ? true : true) ? (
                <Button
                  data-plasmic-name={"logoutBtn"}
                  data-plasmic-override={overrides.logoutBtn}
                  className={classNames("__wab_instance", sty.logoutBtn, {
                    [sty.logoutBtnlogout]: hasVariant(
                      variants,
                      "logout",
                      "logout"
                    )
                  })}
                  color={"link" as const}
                >
                  {"Выйсці"}
                </Button>
              ) : null}
            </p.Stack>
          ) : null}

          <div
            data-plasmic-name={"video"}
            data-plasmic-override={overrides.video}
            className={classNames(projectcss.all, sty.video)}
          />

          {(hasVariant(variants, "loading", "loading") ? true : true) ? (
            <div
              data-plasmic-name={"loading"}
              data-plasmic-override={overrides.loading}
              className={classNames(projectcss.all, sty.loading, {
                [sty.loadingloading]: hasVariant(variants, "loading", "loading")
              })}
            >
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img, {
                  [sty.imgloading]: hasVariant(variants, "loading", "loading")
                })}
                displayHeight={"auto" as const}
                displayMaxHeight={"none" as const}
                displayMaxWidth={"100%" as const}
                displayMinHeight={"0" as const}
                displayMinWidth={"0" as const}
                displayWidth={"50px" as const}
                loading={"lazy" as const}
                src={
                  "https://04.cadwork.com/wp-content/uploads/2019/08/ajax-loader.gif" as const
                }
              />
            </div>
          ) : null}
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "freeBox",
    "header",
    "logo",
    "group",
    "svg",
    "text",
    "logoutBtn",
    "video",
    "loading",
    "img"
  ],
  freeBox: ["freeBox", "header", "logo", "group", "svg", "text", "logoutBtn"],
  header: ["header", "logo", "group", "svg", "text"],
  logo: ["logo", "group", "svg", "text"],
  group: ["group", "svg"],
  svg: ["svg"],
  text: ["text"],
  logoutBtn: ["logoutBtn"],
  video: ["video"],
  loading: ["loading", "img"],
  img: ["img"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  freeBox: "div";
  header: "div";
  logo: "div";
  group: "div";
  svg: "svg";
  text: "div";
  logoutBtn: typeof Button;
  video: "div";
  loading: "div";
  img: typeof p.PlasmicImg;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicRoulette__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicRoulette__VariantsArgs;
    args?: PlasmicRoulette__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicRoulette__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicRoulette__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicRoulette__ArgProps,
      internalVariantPropNames: PlasmicRoulette__VariantProps
    });

    return PlasmicRoulette__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicRoulette";
  } else {
    func.displayName = `PlasmicRoulette.${nodeName}`;
  }
  return func;
}

export const PlasmicRoulette = Object.assign(
  // Top-level PlasmicRoulette renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    header: makeNodeComponent("header"),
    logo: makeNodeComponent("logo"),
    group: makeNodeComponent("group"),
    svg: makeNodeComponent("svg"),
    text: makeNodeComponent("text"),
    logoutBtn: makeNodeComponent("logoutBtn"),
    video: makeNodeComponent("video"),
    loading: makeNodeComponent("loading"),
    img: makeNodeComponent("img"),

    // Metadata about props expected for PlasmicRoulette
    internalVariantProps: PlasmicRoulette__VariantProps,
    internalArgProps: PlasmicRoulette__ArgProps
  }
);

export default PlasmicRoulette;
/* prettier-ignore-end */
